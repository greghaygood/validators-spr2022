{"version":3,"sources":["base-validator.js"],"names":["BaseValidator","element","options","dataset","messages","JSON","stringify","feedback","parentNode","querySelector","span","document","createElement","classList","add","appendChild","addEventListener","handleChange","value","console","error","evt","changedValue","isValid","validate","textContent","Object","values","parse","join","key","message","updateDomMessages","setupDom","setupListeners"],"mappings":";;;;;;;;;;IAAMA,a,6BACF,uBAAYC,OAAZ,EAAmC;AAAA;;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA,oCASxB,YAAM;AACb,QAAI,CAAC,KAAI,CAACD,OAAL,CAAaE,OAAb,CAAqBC,QAA1B,EAAoC;AAChC,MAAA,KAAI,CAACH,OAAL,CAAaE,OAAb,CAAqBC,QAArB,GAAgCC,IAAI,CAACC,SAAL,CAAe,EAAf,CAAhC;AACH;;AAED,IAAA,KAAI,CAACC,QAAL,GAAgB,KAAI,CAACN,OAAL,CAAaO,UAAb,CAAwBC,aAAxB,CAAsC,WAAtC,CAAhB;;AACA,QAAI,CAAC,KAAI,CAACF,QAAV,EAAoB;AAChB,UAAMG,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAb;AACAF,MAAAA,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAmB,UAAnB;;AACA,MAAA,KAAI,CAACb,OAAL,CAAaO,UAAb,CAAwBO,WAAxB,CAAoCL,IAApC;;AAEA,MAAA,KAAI,CAACH,QAAL,GAAgBG,IAAhB;AACH;AACJ,GAtBkC;;AAAA,0CAwBlB,YAAM;AACnB,IAAA,KAAI,CAACT,OAAL,CAAae,gBAAb,CAA8B,QAA9B,EAAwC,KAAI,CAACC,YAA7C;AACH,GA1BkC;;AAAA,oCA4BxB,UAACC,KAAD,EAAW;AAClBC,IAAAA,OAAO,CAACC,KAAR,CAAc,8CAAd,EADkB,CAElB;;AACA,WAAO,KAAP;AACH,GAhCkC;;AAAA,wCAmCpB,UAACC,GAAD,EAAS;AACpB,QAAMC,YAAY,GAAG,KAAI,CAACrB,OAAL,CAAaiB,KAAlC;AAEA,IAAA,KAAI,CAACK,OAAL,GAAe,KAAI,CAACC,QAAL,CAAcF,YAAd,CAAf;AAEA,IAAA,KAAI,CAACf,QAAL,CAAckB,WAAd,GAA4BC,MAAM,CAACC,MAAP,CAActB,IAAI,CAACuB,KAAL,CAAW,KAAI,CAAC3B,OAAL,CAAaE,OAAb,CAAqBC,QAAhC,CAAd,EAAyDyB,IAAzD,CAA8D,GAA9D,CAA5B,CALoB,CAMpB;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAhDkC;;AAAA,oCAkDxB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AACzB,IAAA,KAAI,CAACC,iBAAL,CAAuBF,GAAvB,EAA4BC,OAA5B,EADyB,CAEzB;;AACH,GArDkC;;AAAA,uCAuDrB,UAACD,GAAD,EAAS;AACnB,IAAA,KAAI,CAACE,iBAAL,CAAuBF,GAAvB,EAA4B,EAA5B,EADmB,CAEnB;;AACH,GA1DkC;;AAAA,6CA4Df,UAACA,GAAD,EAAMZ,KAAN,EAAgB;AAChC,QAAId,QAAQ,GAAG,KAAI,CAACH,OAAL,CAAaE,OAAb,CAAqBC,QAApC;AACAA,IAAAA,QAAQ,GAAGC,IAAI,CAACuB,KAAL,CAAWxB,QAAX,CAAX;AACAA,IAAAA,QAAQ,CAAC0B,GAAD,CAAR,GAAgBZ,KAAhB;AACA,IAAA,KAAI,CAACjB,OAAL,CAAaE,OAAb,CAAqBC,QAArB,GAAgCC,IAAI,CAACC,SAAL,CAAeF,QAAf,CAAhC;AACH,GAjEkC;;AAC/B,OAAKH,OAAL,GAAeA,OAAf;AACA,OAAKC,OAAL,GAAeA,OAAf,CAF+B,CAG/B;;AAEA,OAAK+B,QAAL;AACA,OAAKC,cAAL;AACH,C","sourcesContent":["class BaseValidator {\n    constructor(element, options = {}) {\n        this.element = element\n        this.options = options\n        // this.messages = {}\n\n        this.setupDom()\n        this.setupListeners()\n    }\n\n    setupDom = () => {\n        if (!this.element.dataset.messages) {\n            this.element.dataset.messages = JSON.stringify({})\n        }\n\n        this.feedback = this.element.parentNode.querySelector(\".feedback\")\n        if (!this.feedback) {\n            const span = document.createElement(\"span\")\n            span.classList.add(\"feedback\")\n            this.element.parentNode.appendChild(span)\n\n            this.feedback = span\n        }\n    }\n\n    setupListeners = () => {\n        this.element.addEventListener(\"change\", this.handleChange)\n    }\n\n    validate = (value) => {\n        console.error(\"No validate() method in child class defined!\")\n        // console.log(\"BaseValidator.validate with: \", value)\n        return false\n    }\n\n    // convention is that all child validator classes have a validate() method\n    handleChange = (evt) => {\n        const changedValue = this.element.value\n\n        this.isValid = this.validate(changedValue)\n\n        this.feedback.textContent = Object.values(JSON.parse(this.element.dataset.messages)).join(' ')\n        // if (!this.isValid) {\n        //     console.log(\"value is not valid!\", changedValue)\n        //     this.feedback.textContent = \"Not valid!\"\n        // } else {\n        //     console.log(\"value is valid!\", changedValue)\n        //     this.feedback.textContent = \"\"\n        // }\n    }\n\n    addError = (key, message) => {\n        this.updateDomMessages(key, message)\n        // this.messages[key] = message\n    }\n\n    removeError = (key) => {\n        this.updateDomMessages(key, '')\n        // this.messages[key] = ''\n    }\n\n    updateDomMessages = (key, value) => {\n        let messages = this.element.dataset.messages\n        messages = JSON.parse(messages)\n        messages[key] = value\n        this.element.dataset.messages = JSON.stringify(messages)\n    }\n}"],"file":"base-validator.js"}