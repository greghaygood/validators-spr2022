{"version":3,"sources":["validations.js"],"names":["Validations","applyValidators","document","querySelectorAll","forEach","element","keys","dataset","validate","split","console","log","key","RequiredValidator","MinLengthValidator"],"mappings":";;;;;;;;IAAMA,W;AACF,yBAAc;AAAA;;AACV,SAAKC,eAAL;AACH;;;;WAED,2BAAkB;AACdC,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,iBAA1B,EAA6CC,OAA7C,CAAqD,UAACC,OAAD,EAAa;AAC9D,YAAMC,IAAI,GAAGD,OAAO,CAACE,OAAR,CAAgBC,QAAhB,CAAyBC,KAAzB,CAA+B,GAA/B,CAAb;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,IAA/B;AACAA,QAAAA,IAAI,CAACF,OAAL,CAAa,UAACQ,GAAD,EAAS;AAClB,kBAAQA,GAAR;AACI,iBAAK,UAAL;AACI,kBAAIC,iBAAJ,CAAsBR,OAAtB,EAA+BA,OAAO,CAACE,OAAvC;;AACJ,iBAAK,YAAL;AACI,kBAAIO,kBAAJ,CAAuBT,OAAvB,EAAgCA,OAAO,CAACE,OAAxC;;AAEJ,iBAAK,OAAL,CANJ,CAOQ;;AAPR;AAUH,SAXD;AAYH,OAfD;AAgBH;;;;KAGL","sourcesContent":["class Validations {\n    constructor() {\n        this.applyValidators()\n    }\n\n    applyValidators() {\n        document.querySelectorAll(\"[data-validate]\").forEach((element) => {\n            const keys = element.dataset.validate.split(' ')\n            console.log(\"validating with\", keys)\n            keys.forEach((key) => {\n                switch (key) {\n                    case 'required':\n                        new RequiredValidator(element, element.dataset)\n                    case 'min-length':\n                        new MinLengthValidator(element, element.dataset)\n        \n                    case 'email':\n                        // new EmailValidator(element, element.dataset)\n\n                }\n            })\n        })\n    }\n}\n\n// new Validations()"],"file":"validations.js"}